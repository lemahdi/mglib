//// 
//// Autogenerated by xlw 
//// Do not edit this file, it will be overwritten 
//// by InterfaceGenerator 
////

#include <xlw/MyContainers.h>
#include <xlw/CellMatrix.h>
#include "justatest.h"
#include <xlw/xlw.h>
#include <xlw/XlFunctionRegistration.h>
#include <stdexcept>
#include <xlw/XlOpenClose.h>
#include <ctime>
#include <mgnova/utils/utils.h>

#include <xlw/cache/cached.h>

namespace {
const char* LibraryName = "MyTestLibrary";
};

// dummy function to force linkage
namespace {
void DummyFunction()
{
xlAutoOpen();
xlAutoClose();
}
}

// registrations start here


namespace
{
XLRegistration::Arg
JustATestArgs[]=
{
{ "Date","too lazy to comment this one ","XLF_OPER"}
};
  XLRegistration::XLFunctionRegistrationHelper
registerJustATest("xlJustATest",
"MG_JustATest",
" just a test ",
LibraryName,
JustATestArgs,
1
,false
);
}



extern "C"
{
LPXLFOPER EXCEL_EXPORT
xlJustATest(
LPXLFOPER Datea)
{
EXCEL_BEGIN;

	if (XlfExcel::Instance().IsCalledByFuncWiz())
		return XlfOper(true);

XlfOper Dateb(
	(Datea));
MG_Date Date(
	Dateb.AsMGDate("Date"));

MG_Date result(
	JustATest(
		Date)
	);
double vXLDate = MG_utils::FromJulianDayToXLDate(result.GetJulianDay());
return XlfOper(vXLDate);
EXCEL_END
}
}



//////////////////////////

namespace
{
XLRegistration::Arg
BSModelArgs[]=
{
{ "AsOf"," as of date ","XLF_OPER"},
{ "Vol"," bs volatility ","B"}
};
  XLRegistration::XLFunctionRegistrationHelper
registerBSModel("xlBSModel",
"MG_BSModel",
" just an object test ",
LibraryName,
BSModelArgs,
2
,false
);
}



extern "C"
{
LPXLFOPER EXCEL_EXPORT
xlBSModel(
LPXLFOPER AsOfa,
double Vol)
{
EXCEL_BEGIN;

	if (XlfExcel::Instance().IsCalledByFuncWiz())
		return XlfOper(true);

XlfOper AsOfb(
	(AsOfa));
MG_Date AsOf(
	AsOfb.AsMGDate("AsOf"));


MG_XLObjectPtr result(
	BSModel(
		AsOf,
		Vol)
	);
string vRefObj, vError;
if (MG_SCache::Instance()->PersistentInsert(result, vRefObj, vError))
  return XlfOper(vRefObj);
else
  return XlfOper(vError);
EXCEL_END
}
}



//////////////////////////

namespace
{
XLRegistration::Arg
CallArgs[]=
{
{ "Strike"," strike ","B"},
{ "Maturity"," maturity ","B"},
{ "Forward"," forward ","B"}
};
  XLRegistration::XLFunctionRegistrationHelper
registerCall("xlCall",
"MG_Call",
" just an object test ",
LibraryName,
CallArgs,
3
,false
);
}



extern "C"
{
LPXLFOPER EXCEL_EXPORT
xlCall(
double Strike,
double Maturity,
double Forward)
{
EXCEL_BEGIN;

	if (XlfExcel::Instance().IsCalledByFuncWiz())
		return XlfOper(true);




MG_XLObjectPtr result(
	Call(
		Strike,
		Maturity,
		Forward)
	);
string vRefObj, vError;
if (MG_SCache::Instance()->PersistentInsert(result, vRefObj, vError))
  return XlfOper(vRefObj);
else
  return XlfOper(vError);
EXCEL_END
}
}



//////////////////////////

namespace
{
XLRegistration::Arg
PriceArgs[]=
{
{ "aSec"," security ","XLF_OPER"},
{ "aMod"," model ","XLF_OPER"}
};
  XLRegistration::XLFunctionRegistrationHelper
registerPrice("xlPrice",
"MG_Price",
" pricing ",
LibraryName,
PriceArgs,
2
,false
);
}



extern "C"
{
LPXLFOPER EXCEL_EXPORT
xlPrice(
LPXLFOPER aSeca,
LPXLFOPER aModa)
{
EXCEL_BEGIN;

	if (XlfExcel::Instance().IsCalledByFuncWiz())
		return XlfOper(true);

XlfOper aSecb(
	(aSeca));
MG_XLObjectPtr aSec(
	aSecb.AsMGXLObject("aSec"));

XlfOper aModb(
	(aModa));
MG_XLObjectPtr aMod(
	aModb.AsMGXLObject("aMod"));

double result(
	Price(
		aSec,
		aMod)
	);
return XlfOper(result);
EXCEL_END
}
}



//////////////////////////

namespace
{
XLRegistration::Arg
VolatilityCurve_CreateArgs[]=
{
{ "aAsOf"," as of date ","XLF_OPER"},
{ "aMaturities"," maturities ","XLF_OPER"},
{ "aTenors"," tenors ","XLF_OPER"},
{ "aVolatilities"," volatilities ","XLF_OPER"}
};
  XLRegistration::XLFunctionRegistrationHelper
registerVolatilityCurve_Create("xlVolatilityCurve_Create",
"MG_VolatilityCurve_Create",
" Creating an IR volatility curve ",
LibraryName,
VolatilityCurve_CreateArgs,
4
,false
);
}



extern "C"
{
LPXLFOPER EXCEL_EXPORT
xlVolatilityCurve_Create(
LPXLFOPER aAsOfa,
LPXLFOPER aMaturitiesa,
LPXLFOPER aTenorsa,
LPXLFOPER aVolatilitiesa)
{
EXCEL_BEGIN;

	if (XlfExcel::Instance().IsCalledByFuncWiz())
		return XlfOper(true);

XlfOper aAsOfb(
	(aAsOfa));
MG_Date aAsOf(
	aAsOfb.AsMGDate("aAsOf"));

XlfOper aMaturitiesb(
	(aMaturitiesa));
CellMatrix aMaturities(
	aMaturitiesb.AsCellMatrix("aMaturities"));

XlfOper aTenorsb(
	(aTenorsa));
CellMatrix aTenors(
	aTenorsb.AsCellMatrix("aTenors"));

XlfOper aVolatilitiesb(
	(aVolatilitiesa));
CellMatrix aVolatilities(
	aVolatilitiesb.AsCellMatrix("aVolatilities"));

MG_XLObjectPtr result(
	VolatilityCurve_Create(
		aAsOf,
		aMaturities,
		aTenors,
		aVolatilities)
	);
string vRefObj, vError;
if (MG_SCache::Instance()->PersistentInsert(result, vRefObj, vError))
  return XlfOper(vRefObj);
else
  return XlfOper(vError);
EXCEL_END
}
}



//////////////////////////

